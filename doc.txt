Network Working Group                                       Yanis Kernoua
                                                            Grégor Sternat
                                                            Dryss Marguerite
Request for Comments: 0001                                  April 20, 2025

                        JETPACK NETWORK BINARY PROTOCOL

Status of This Memo

    This memo is the official specification of the Jetpack Network Binary
    Protocol.

    This memo documents the Jetpack Protocol as implemented by the
    referenced Jetpack game server and client.

1. Introduction

    The Jetpack Protocol is designed for real-time multiplayer platformer
    games where players navigate a 2D environment, collecting coins and
    avoiding electric square. It provides mechanisms for synchronizing game
    state across multiple clients, handling player input, and managing game
    sessions.

    The protocol is binary-based for efficiency and operates over TCP to
    ensure reliable delivery of game state updates.

2. Protocol Overview

    The Jetpack Protocol operates on a client-server model. The server is
    authoritative and maintains the official game state, while clients
    send input and receive state updates.

    The protocol defines several message types for different aspects of
    gameplay, including connection management, game state updates, and
    event notifications.

3. Binary Message Format

    All messages in the Jetpack Protocol follow a common structure: a
    single-byte packet type identifier followed by packet-specific data.
    All multi-byte integers are transmitted in little-endian byte order.

Network Working Group RFC 0001
April 20, 2025 Page 1
\f

3.1. Packet Types

    The following packet types are defined:

    Type | Value | Direction | Description
    CONNECT_REQUEST | 0x01 | Client → Server | Request to join a game
    CONNECT_RESPONSE | 0x02 | Server → Client | Connection accepted or rejected
    MAP_DATA | 0x03 | Server → Client | Game map information
    GAME_START | 0x04 | Server → Client | Game is starting
    PLAYER_INPUT | 0x05 | Client → Server | Player control input
    GAME_STATE_UPDATE | 0x06 | Server → Client | Current game state
    COIN_COLLECTED | 0x08 | Server → Client | Player collected a coin
    PLAYER_DEATH | 0x09 | Server → Client | Player died
    GAME_OVER | 0x0A | Server → Client | Game has ended
    PLAYER_DISCONNECT | 0x0B | Client → Server | Player is disconnecting

3.2. Packet Structures

   This section details the structure of each packet type.

3.2.1. CONNECT_REQUEST (0x01)

   Sent by the client to request joining a game.

   Structure:
   Type (1) | Version (1)

   Fields:
   * Type: 0x01 (CONNECT_REQUEST)
   * Version: Game version (for future use)

3.2.2 CONNECT_RESPONSE (0x02)

    Sent by the server in response to a CONNECT_REQUEST.

    Structure:
    Type (1) | Player Id (1) | Player Count (1)

    Fields:
    * Type: 0x02 (CONNECT_RESPONSE)
    * Player Id: Assigned player identifier
    * Player Count: Current number of connected players

Network Working Group RFC 0001
April 20, 2025 Page 2
\f

3.2.3. MAP_DATA (0x03)

    Sent by the server to provide the game map to a client.

    Structure:
    Type (1) | Width (2) | Height (2) | ... Map Data (Width * Height)

    Fields:
    * Type: 0x03 (MAP_DATA)
    * Width: Width of the map in tiles (little-endian)
    * Height: Height of the map in tiles (little-endian)
    * Map Data: One byte per map tile, width*height total bytes
    - 0x00: Empty space
    - 0x01: Wall
    - 0x02: Coin
    - 0x03: Electric square

3.2.4. GAME_START (0x04)

    Sent by the server to notify clients that the game is starting.

    Structure:
    Type (1) | Player Count (1) | Countdown (1)

    Fields:
    * Type: 0x04 (GAME_START)
    * Player Count: Number of players in the game
    * Countdown: Seconds until the game starts (0 means start immediately)

3.2.5. PLAYER_INPUT (0x05)

    Sent by the client to update the player's input state.

    Structure:
    Type (1) | Jetpack (1)

    Fields:
    * Type: 0x05 (PLAYER_INPUT)
    * Jetpack: 1 if jetpack is activated, 0 if inactive

Network Working Group RFC 0001
April 20, 2025 Page 3
\f

3.2.6. GAME_STATE_UPDATE (0x06)

    Sent by the server to update clients on the current game state.

    Structure:
    Type (1) | Player Cnt (1)| Player 1 ID (1)| State 1 (1) | X-Position 1 (2)
    | Y-Position 1 (2) | Score 1 (2) | Jetpack 1 (1) | Pad 1 (1)
    | Player 2 ID (1) | ...

    Fields:
    * Type: 0x06 (GAME_STATE_UPDATE)
    * Player Count: Number of players in this update

    For each player:
    * Player ID: Player identifier
    * State: Player state
    - 0x00: Connected
    - 0x01: Ready
    - 0x02: Playing
    - 0x03: Dead
    - 0x04: Finished
    - 0x05: Disconnected
    * X-Position: X coordinate (fixed point, 2 decimal places, little-endian)
    * Y-Position: Y coordinate (fixed point, 2 decimal places, little-endian)
    * Score: Player score (little-endian)
    * Jetpack: 1 if active, 0 if inactive
    * Pad: Padding byte (should be 0)

3.2.7. COIN_COLLECTED (0x08)

    Sent by the server when a player collects a coin.

    Structure:
    Type (1) | Player ID (1) | X (1) | Y (1) | Score (1) | Coin State (1)

    Fields:
    * Type: 0x08 (COIN_COLLECTED)
    * Player ID: ID of player who collected the coin
    * X: X coordinate of the coin
    * Y: Y coordinate of the coin
    * Score: Updated player score
    * State: Coin state (for which player it is still available)

3.2.8. PLAYER_DEATH (0x09)

    Sent by the server when a player dies.

    Structure:
    Type (1) | Player ID (1)

    Fields:
    * Type: 0x09 (PLAYER_DEATH)
    * Player ID: Identifier of player who died

Network Working Group RFC 0001
April 20, 2025 Page 4
\f

3.2.9. GAME_OVER (0x0A)

    Sent by the server when the game ends.

    Structure:
    Type (1) | Has Winner(1) | Winner ID (1)

    Fields:
    * Type: 0x0A (GAME_OVER)
    * Has Winner: 1 if there is a winner, 0 if no winner
    * Winner ID: Identifier of winning player (only valid if Has Winner is 1)

3.2.10. PLAYER_DISCONNECT (0x0B)

    Sent by the client when disconnecting from the server.

    Structure:
    Type (1)

    Fields:
    * Type: 0x0B (PLAYER_DISCONNECT)

4. Connection Flow

    This section describes the typical message sequences during a game
    session.

4.1. Initial Connection

    1. Client sends CONNECT_REQUEST to the server
    2. Server responds with CONNECT_RESPONSE, assigning a player Id
    3. Server sends MAP_DATA to the client
    4. Client waits for GAME_START message

4.2. Game Start Sequence

    When at least two players have connected:

    1. Server sends GAME_START with countdown value >= 0
    2. Server sends periodic GAME_START messages with decreasing countdown
    3. Server sends final GAME_START with countdown = 0 to begin the game
    4. Server begins sending GAME_STATE_UPDATE messages

4.3. Game Play

    During gameplay:

    1. Clients send PLAYER_INPUT messages when player input changes
    2. Server sends GAME_STATE_UPDATE messages at regular intervals
    3. When a player collects a coin, server sends COIN_COLLECTED
    4. When a player hits an electric square, server sends PLAYER_DEATH

Network Working Group RFC 0001
April 20, 2025 Page 5
\f

4.4. Game End

    The game ends when:
    - A player reaches the end of the map, or
    - A player dies, or
    - Too few players remain connected

    1. Server sends GAME_OVER message to all clients

5. Map Format

    This section describes the map format used by the Jetpack Protocol.

5.1. Structure

    The game map is a 2D grid of tiles. Each tile represents one unit of
    space in the game world. The map is transmitted to clients in the
    MAP_DATA packet.

    Maps are stored as a sequence of bytes, with each byte representing one
    tile. The tiles are arranged in row-major order (all tiles in the first
    row, followed by all tiles in the second row, and so on).

    Example map file format (text representation):
    ________e_c
    _______e__c
    _____e____c
    ___cc_____c

    Where:
    - `_` (underscore) represents empty space
    - `e` represents an electric square
    - `c` represents a coin

    When loading from a file, the width is determined by the length of the
    first line, and the height by the number of lines. All lines must have
    the same length.

Network Working Group RFC 0001
April 20, 2025 Page 6
\f

5.2. Map Objects

    The following map objects are defined:

    * Empty (0x00): Empty space that players can move through
    * Coin (0x01): Collectible that increases the player's score
    * Electric (0x02): Electric square that causes player death on contact

6. Security Considerations

    The protocol assumes a trusted server and unsecured TCP. For
    deployment over untrusted networks, TLS should be used to
    prevent man‑in‑the‑middle and replay attacks.

7. Author's Address

    Yanis Kernoua
    Email: yanis.kernoua@epitech.ensure

    Grégor Sternat

    Dryss Marguerite

Network Working Group RFC 0001
April 20, 2025 Page 7
\f
